mport pandas as pd
import numpy as np
import joblib
import os

import streamlit as st
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

#Load the CSV file (should be in the same folder)

DATA_PATH = "C:/Users/kella/OneDrive/Desktop/data.csv"

df = pd.read_csv(DATA_PATH)


#2️Preprocessing and EDA
print("\nInitial Data Info:")
print(df.info())

df.dropna(inplace=True)


required_cols = ['location', 'area', 'bhk', 'bathrooms', 'price']
missing = [col for col in required_cols if col not in df.columns]
if missing:
    st.error(f" Missing columns in your CSV: {missing}")
    st.stop()

df = df[required_cols]


print("\n Price Stats:")
print(df['price'].describe())


categorical = ['location']
numerical = ['area', 'bhk', 'bathrooms']

X = df[categorical + numerical]
y = df['price']


preprocessor = ColumnTransformer([
    ('num', StandardScaler(), numerical),
    ('cat', OneHotEncoder(handle_unknown='ignore'), categorical)
])


model = Pipeline([
    ('preprocessor', preprocessor),
    ('regressor', LinearRegression())
])


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("\n Model Evaluation:")
print(f"RMSE: {rmse:.2f}")
print(f"MAE: {mae:.2f}")
print(f"R² Score: {r2:.2f}")

# Save model
MODEL_PATH = 'model.pkl'
joblib.dump(model, MODEL_PATH)
print(" Model saved as 'model.pkl'")

#  Streamlit Web App
st.set_page_config(page_title="Real Estate Price Predictor", layout="centered")
st.title("Real Estate Price Predictor Dashboard")
st.markdown("Enter property details below to get the estimated market price (in Lakhs ₹).")

# User Inputs
locations = sorted(df['location'].unique())
location = st.selectbox(" Location", locations)
area = st.number_input(" Area (sq ft)", min_value=100, value=1000)
bhk = st.selectbox("Bedrooms (BHK)", [1, 2, 3, 4, 5])
bath = st.selectbox("Bathrooms", [1, 2, 3, 4])

# Predict Price
if st.button("Predict Price"):
    input_df = pd.DataFrame([[location, area, bhk, bath]], columns=['location', 'area', 'bhk', 'bathrooms'])
    model = joblib.load(MODEL_PATH)
    prediction = model.predict(input_df)[0]
    st.success(f" Estimated Price: ₹ {round(prediction, 2)} Lakhs")

# Show metrics
with st.expander(" Model Performance"):
    st.write(f"**RMSE:** {rmse:.2f}")
    st.write(f"**MAE:** {mae:.2f}")
    st.write(f"**R² Score:** {r2:.2f}")
